# Match the python versions in:
# - pyproject.toml

# https://hub.docker.com/r/dazzacodes/docker-python
image: dazzacodes/docker-python:3.6

services:
  - docker:19.03.6-dind
  - postgres:12.2-alpine

variables:
  # Specify to Docker where to create the certificates, Docker will
  # create them automatically on boot, and will create
  # `/certs/client` that will be shared between the service and job
  # container, thanks to volume mount from config.toml
  DOCKER_TLS_CERTDIR: "/certs"
  POSTGRES_DB: nice_marmot
  POSTGRES_USER: runner
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: trust

cache:
  paths:
    - .venv/

before_script:
  - ls -al ./*
  ## aio-aws tests require moto-server which requires docker to run batch jobs
  - docker info
  # NOTE: docker run does not exit!  It hangs the build at this point.
  #- docker run alpine:latest /bin/sh -c 'echo Hello Alpine'
  ##
  ## mock AWS credentials with no content
  - test -f ~/.aws/credentials && rm ~/.aws/credentials
  - export AWS_SECRET_ACCESS_KEY=dummy_AWS_SECRET_ACCESS_KEY
  - export AWS_ACCESS_KEY_ID=dummy_AWS_ACCESS_KEY_ID
  ##
  ## Install build dependencies - do NOT add python3 here
  - apk add --update --no-cache bash ca-certificates curl sed wget
  - apk add --update --no-cache gcc git glib libstdc++ linux-headers make musl-dev postgresql-dev postgresql-libs
  ##
  ## Install project dependencies
  - curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py -o /tmp/get-poetry.py
  - python /tmp/get-poetry.py
  - source ${HOME}/.poetry/env
  - poetry config virtualenvs.in-project true
  - poetry run pip install --upgrade pip
  - poetry install -v --no-interaction
  - pip freeze -v

stages:
  - code-test
  - deploy

# code_quality:
#   stage: code-test
#   allow_failure: true
#   only:
#     refs:
#       - merge_requests
#   script:
#     - make lint && make typehint

code_test:
  stage: code-test
  only:
    refs:
      - master
      - merge_requests
    changes:
      - package/**/*
      - tests/**/*
      - .gitlab-ci.yml
      - Makefile
      - pyproject.toml
  script:
    - make coverage

package:
  stage: deploy
  only:
    refs:
      - master
  script:
    - make package-check
  artifacts:
    paths:
      - dist/

pages:
 allow_failure: true
 stage: deploy
 only:
   refs:
     - master
 script:
   - make docs
   - mv docs/_build/html/ public/
 artifacts:
   paths:
     - public

#publish:
#  stage: deploy
#  only:
#    refs:
#      - master
#  script:
#    - make publish
#  only:
#    - tags
